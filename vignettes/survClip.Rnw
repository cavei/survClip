\documentclass{article}

<<style. eval=TRUE, echo=FALSE, results=tex>>=
BiocStyle::latex()
@

\begin{document}
% \VignetteIndexEntry{survClip}
% \VignetteDepends{survClip}

<<ccpr, include=FALSE, echo=FALSE >>=
options(keep.source =TRUE, width=60)
cppr <- packageDescription("survClip")
@

\SweaveOpts{concordance=TRUE}

\title{survClip package (Version \Sexpr{cppr$Version})}
\author{Paolo Martini, Enrica Calura and Chiara Romualdi}

\maketitle

\section{\textit{survClip}: pathway based survival analysis}

\subsection{\textit{survClip} in a nutshell}
In the field of molecular medicine, it is of utmost importance to find genes that are prognostic markers. What about finding molecular circuits so circuits defined as small clusters of genes of the same pathway that has the ability to predict patients' outcome?
That is why we devised \textit{survClip}. The package include 2 main functions that allow to predict if a given pathway is relevant for patients' survival and which are the best candidate circuits.

\subsection{Pathway Analysis}
In this section we describe the analysis of a toy example based on EOC stage I.
<<loadDatasetAndPathway>>=
library(survival)
library(survClip)
data(exp)
data(ann)
samples <- intersect(colnames(exp),row.names(ann))
exp <- exp[,samples, drop=FALSE]
ann <- ann[samples,, drop=FALSE]
head(ann)
@

Now we go and create the survival annotation. To this hand, we insert in the package a function that given an interval between two dates computes the days.

<<createSurvivalAnnotation>>=
time <- computeDays(ann[,1:2])
events <- as.numeric(ann[,3])
survAnnot <- data.frame(days=time, status=events, row.names=samples)
@

Now we load the pathway form KEGG. We chosed "Pathways in cancer".

<<downloadThePathwayUsingGraphite>>=
library(graphite)
k <- pathways("hsapiens", "kegg")
p <- convertIdentifiers(k[["Pathways in cancer"]], "entrez")
graph <- pathwayGraph(p)
@

Now we shaped the dataset and the pathway according to the genes that are shared between them.
<<filterGenes>>=
genes <- intersect(graph::nodes(graph), row.names(exp))
graph <- graph::subGraph(genes, graph)
expr <- exp[genes, , drop=FALSE]
@

We are ready to run the pathway analysis. In this case we choose to evaluate the first three pricipal components. The \textit{pcsSurvCoxMethod} argument is in the default set to 'regular' which means that a normal PCA is done. In this example we use the 'topological' method. In this case the topology of the pathway is taken into account when computing PCs.
<<runPathwaySurvClip>>=
testPath <- pathwaySurvivalTest(expr, survAnnot, pcsSurvCoxMethod="topological", graph, maxPCs=3)
testPath
@

\subsection{Circuits analysis}
We implemented a second test. It is based on the decomposition of the pathway in the cliques. Each cliques is than tested. There are two tests: the regular one, that is based on a classical PCA. The second one is called sparse. The latter is slower but using the penalization it allows to detect hidden signals.

<<runCliqueSurvivalTest>>=
testCliques <- cliqueSurvivalTest(expr, graph, survAnnot, pcsSurvCoxMethod="sparse", maxPCs=3)
testCliques
@

\end{document}